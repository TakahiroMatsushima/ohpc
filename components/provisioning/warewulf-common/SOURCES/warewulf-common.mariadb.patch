--- warewulf-common-3.6/libexec/wwinit/10-database.init	2014-05-21 11:12:17.000000000 -0700
+++ warewulf-common-3.6.patch/libexec/wwinit/10-database.init	2016-12-07 14:52:04.000000000 -0800
@@ -9,6 +9,7 @@
 
 #INIT: ALL
 #INIT: DATASTORE
+#INIT: DATABASE
 
 
 if [ -f "$WWFUNCTIONS" ]; then
@@ -21,60 +22,113 @@
 wwreqroot
 
 DATASTORE=`egrep "^database driver\s*=" $WAREWULF_SYSCONFDIR/warewulf/database.conf | awk -F = '{print $2}' | sed -e 's/\s*//g'`
+DBNAME=`egrep "^database name\s*=" $WAREWULF_SYSCONFDIR/warewulf/database.conf | awk -F = '{print $2}' | sed -e 's/\s*//g'`
+DBUSER=`egrep "^database user\s*=" $WAREWULF_SYSCONFDIR/warewulf/database.conf | awk -F = '{print $2}' | sed -e 's/\s*//g'`
+DBPASS=`egrep "^database password\s*=" $WAREWULF_SYSCONFDIR/warewulf/database.conf | awk -F = '{print $2}' | sed -e 's/\s*//g'`
+DBROOTUSER=`egrep "^database user\s*=" $WAREWULF_SYSCONFDIR/warewulf/database-root.conf | awk -F = '{print $2}' | sed -e 's/\s*//g'`
+DBROOTPASS=`egrep "^database password\s*=" $WAREWULF_SYSCONFDIR/warewulf/database-root.conf | awk -F = '{print $2}' | sed -e 's/\s*//g'`
+APIVERSION="1"
+
+SCHEMA="CREATE TABLE IF NOT EXISTS meta (
+    id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
+    name VARCHAR(64),
+    value VARCHAR(256),
+    PRIMARY KEY (id)
+);
+CREATE TABLE IF NOT EXISTS datastore (
+    id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
+    type VARCHAR(64),
+    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
+    serialized BLOB,
+    data BLOB,
+    INDEX (id),
+    PRIMARY KEY (id)
+) ENGINE=INNODB;
+CREATE TABLE IF NOT EXISTS binstore (
+    id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
+    object_id INT UNSIGNED,
+    chunk LONGBLOB,
+    FOREIGN KEY (object_id) REFERENCES datastore (id),
+    INDEX (id),
+    PRIMARY KEY (id)
+) ENGINE=INNODB;
+CREATE TABLE IF NOT EXISTS lookup (
+    id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
+    object_id INT UNSIGNED,
+    field VARCHAR(64) BINARY,
+    value VARCHAR(64) BINARY,
+    FOREIGN KEY (object_id) REFERENCES datastore (id),
+    INDEX (id),
+    UNIQUE KEY (object_id, field, value),
+    PRIMARY KEY (id)
+) ENGINE=INNODB;"
+
 
 if [ "$DATASTORE" = "mysql" ]; then
-    if [ -f "/etc/redhat-release" ]; then
-        wwprint "Checking /etc/rc.d/init.d/mysqld is installed"
-        if ! wwtest test -f /etc/rc.d/init.d/mysqld; then
-            exit 255
-        fi
-
-        wwprint "Confirming mysqld is configured to start at boot:\n"
-        if ! wwrun chkconfig mysqld on; then
-            exit 255
-        fi
-  
-        wwprint "Checking to see if MySQL needs to be started:\n"
-        if ! wwrun service mysqld start; then
-            exit 255
-        fi
-    elif [ -f "/etc/debian_version" ]; then
-        wwprint "Checking /etc/init.d/mysql is installed"
-        if ! wwtest test -f /etc/init.d/mysql; then
-            exit 255
-        fi
-
-        # enable backwards compatibility
-        wwprint "Confirming mysqld is configured to start at boot:\n"
-        if [ "x$(which initctl)" = "x" ]; then
-            wwprint "Upstart's initctl not found. Checking run levels with insserv:\n"
-            for i in $( $(which insserv) -s | grep 'mysql' | grep 'S:' | cut -d: -f3 ); do
-                wwprint "    mysql boots on run level $GREEN $i \n"
-            done
-
-            if [ "x${i}" = "x" ]; then
-                wwprint "$RED WARNING: MySQL is not configured to start at boot.\n"
-                wwprint "$RED Fix that manually.\n"
-            fi
-
-        else
-            if ! wwrun initctl show-config mysql; then
-                wwprint "$RED WARNING: MySQL is not configured to start at boot.\n"
-                wwprint "$RED Fix that manually.\n"
-            fi
-        fi
-
-        wwprint "Checking to see if MySQL needs to be started:\n"
-        if ! wwrun service mysql status; then
-            if ! wwrun service mysql start; then
-                exit 255
-            fi
-        fi
+    if wwpackage_check mysql-server; then
+        wwservice_activate mysqld mysql
+    elif wwpackage_check mariadb-server; then
+        wwservice_activate mariadb
+    else
+        wwprint "No database package seems to exist for mysql!\n" error
+        exit 255
     fi
 else
-    wwprint "Skipping configuration of datastore driver: $DATABASE\n"
+    wwprint "Skipping configuration of datastore driver: $DATASTORE\n"
+fi
+
+if ! echo "use $DBNAME;" | mysql 2>/dev/null; then
+    wwrun mysqladmin create "$DBNAME" || exit 255
+fi
+
+DBVERS=`echo "select value from meta where name = 'dbvers' LIMIT 1;" | mysql -s "$DBNAME" 2>/dev/null`
+if [ -n "$DBVERS" ]; then
+    wwprint "Database version: $DBVERS\n"
+else
+    wwprint "Database version: UNDEF (need to create database)\n"
+fi
+
+if [ -z "$DBVERS" ]; then
+    wwprint "Creating database schema"
+    if echo "$SCHEMA" | mysql "$DBNAME"; then
+        reply_success
+    else
+        reply_error
+        exit 255
+    fi
+    wwprint "Setting the DB SCHEMA version to $APIVERSION"
+    if echo "insert into meta (name, value) VALUES ('dbvers', '$APIVERSION');" | mysql "$DBNAME"; then
+        reply_success
+    else
+        reply_error
+        exit 255
+    fi
+elif [ $DBVERS -lt $APIVERSION ]; then
+    wwprint "Updating database schema"
+    echo "UPDATE meta SET value=$APIVERSION WHERE name = 'dbvers';" | mysql "$DBNAME"
+    replay_skipped
 fi
 
+if [ -n "$DBUSER" -a "$DBUSER" != "root" ]; then
+    wwprint "Updating database permissions for base users"
+    if echo "GRANT SELECT ON $DBNAME.* TO $DBUSER@localhost IDENTIFIED BY '$DBPASS';" | mysql $DBNAME; then
+        reply_success
+    else
+        reply_error
+    fi
+fi
+
+if [ -n "$DBROOTUSER" -a "$DBROOTUSER" != "root" ]; then
+    wwprint "Updating database permissions for root user"
+    if echo "GRANT ALL PRIVILEGES ON $DBNAME.* TO $DBROOTUSER@localhost IDENTIFIED BY '$DBROOTPASS';" | mysql $DBNAME; then
+        reply_success
+    else
+        reply_error
+    fi
+fi
+
+
+
 exit 0
 
 # vim: filetype=sh:syntax=sh:expandtab:ts=4:sw=4:
